(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s="./src/ten321/post-content-shortcodes/blocks/list/block.js")})({"./src/ten321/post-content-shortcodes/blocks/list/block.js":function(module,exports){eval("/**\n * BLOCK: post-content-shortcodes/list\n *\n * Registering a basic block with Gutenberg.\n * Simple block, renders and saves the same content without any interactivity.\n */\n//  Import CSS.\n\n/*import './editor.scss';\nimport './style.scss';\n\nimport {getAttributeValue, getDisplayPanel, getImagePanel} from '../common.js';\n\nconst {__} = wp.i18n; // Import __() from wp.i18n\nconst {InspectorControls} = wp.blockEditor;\nconst {PanelBody, CheckboxControl, BaseControl, TextControl, CustomSelectControl, RadioControl} = wp.components;\nconst {useState} = wp.element;\nconst {withState} = wp.compose;\nconst {registerBlockType} = wp.blocks; // Import registerBlockType() from wp.blocks\nconst {ServerSideRender} = wp.editor;\n\nconst orderByOptions = [\n    {key: 'post_title', name: __('Title', 'post-content-shortcodes')},\n    {key: 'date', name: __('Post Date', 'post-content-shortcodes')},\n    {key: 'menu_order', name: __('Menu/Page order', 'post-content-shortcodes')},\n    {key: 'ID', name: __('Post ID', 'post-content-shortcodes')},\n    {key: 'author', name: __('Author', 'post-content-shortcodes')},\n    {key: 'modified', name: __('Post Modification Date', 'post-content-shortcodes')},\n    {key: 'parent', name: __('Post Parent ID', 'post-content-shortcodes')},\n    {key: 'comment_count', name: __('Number of Comments', 'post-content-shortcodes')},\n    {key: 'rand', name: __('Random', 'post-content-shortcodes')},\n];\n\nconst orderOptions = [\n    {value: 'asc', label: __('Ascending', 'post-content-shortcodes')},\n    {value: 'desc', label: __('Descending', 'post-content-shortcodes')},\n];\n\nconst statusOptions = [\n    {key: 'publish', name: __('Published', 'post-content-shortcodes')},\n    {key: 'draft', name: __('Draft', 'post-content-shortcodes')},\n    {key: 'pending', name: __('Pending Review', 'post-content-shortcodes')},\n    {key: 'inherit', name: __('Inherited', 'post-content-shortcodes')},\n];\n\n/!**\n * Register: aa Gutenberg Block.\n *\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made editor as an option to any\n * editor interface where blocks are implemented.\n *\n * @link https://wordpress.org/gutenberg/handbook/block-api/\n * @param  {string}   name     Block name.\n * @param  {Object}   settings Block settings.\n * @return {?WPBlock}          The block, if it has been successfully\n *                             registered; otherwise `undefined`.\n *!/\nregisterBlockType('ten321--post-content-shortcodes--blocks/list', {\n    // Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.\n    title: __('PCS Post List Block'), // Block title.\n    icon: 'list-view', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.\n    category: 'common', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.\n    keywords: [\n        __('Post Content Shortcodes'),\n        __('Content List'),\n        __('Post List'),\n        __('Multisite'),\n        __('excerpt'),\n    ],\n    transforms: {\n        from: [\n            {\n                type: 'block',\n                blocks: ['core/shortcode'],\n                isMatch: function ({text}) {\n                    return /^\\[post-list /.test(text);\n                },\n                transform: ({text}) => {\n                    let atts = {};\n                    for (let i in ten321__post_content_shortcodes__blocks__content.reg_args.transforms.attributes) {\n                        if (!ten321__post_content_shortcodes__blocks__content.reg_args.transforms.attributes.hasOwnProperty(i)) {\n                            continue;\n                        }\n\n                        let tmp = getAttributeValue('post-content', i, text);\n                        if (i === 'blog') {\n                            let blogList = ten321__post_content_shortcodes__blocks__list.blogList;\n                            for (let b in blogList) {\n                                if (!blogList.hasOwnProperty(b)) {\n                                    continue;\n                                }\n\n                                if ((blogList[b].key * 1) !== (tmp * 1)) {\n                                    continue;\n                                }\n\n                                atts[i] = blogList[b];\n                            }\n                        } else if (i === 'orderby') {\n                            for (let b in orderByOptions) {\n                                if (!orderByOptions.hasOwnProperty(b)) {\n                                    continue;\n                                }\n\n                                if ((orderByOptions[b].key.toLowerCase() === tmp.toLowerCase())) {\n                                    atts[i] = orderByOptions[b];\n                                }\n                            }\n                        } else if (i === 'post_status') {\n                            for (let b in statusOptions) {\n                                if (!statusOptions.hasOwnProperty(b)) {\n                                    continue;\n                                }\n\n                                if (statusOptions[b].key.toLowerCase() === tmp.toLowerCase()) {\n                                    atts[i] = statusOptions[b];\n                                }\n                            }\n                        } else if (tmp !== null) {\n                            switch (i) {\n                                case 'order' :\n                                    atts[i] = tmp.toLowerCase() === 'desc' ? 'desc' : 'asc';\n                                    break;\n                                case 'show_title' :\n                                case 'show_image' :\n                                case 'show_comments' :\n                                case 'show_excerpt' :\n                                case 'read_more' :\n                                case 'shortcodes' :\n                                case 'strip_html' :\n                                case 'show_author' :\n                                case 'show_date' :\n                                case 'link_image' :\n                                case 'ignore_protected' :\n                                    atts[i] = tmp === 'true' || tmp === 1 || tmp === '1' || tmp === true;\n                                    break;\n                                case 'post_parent' :\n                                case 'image_width' :\n                                case 'image_height' :\n                                case 'excerpt_length' :\n                                case 'numberposts' :\n                                    atts[i] = Number(tmp);\n                                    break;\n                                default :\n                                    atts[i] = tmp;\n                                    break;\n                            }\n                        }\n                    }\n\n                    return wp.blocks.createBlock('ten321--post-content-shortcodes--blocks/list', atts);\n                }\n            }\n        ]\n    },\n    attributes: ten321__post_content_shortcodes__blocks__list.reg_args.attributes,\n\n    edit: (props) => {\n        console.log('List block attributes:');\n        console.log(ten321__post_content_shortcodes__blocks__list.reg_args.attributes);\n\n        const blogOptions = ten321__post_content_shortcodes__blocks__list.blogList;\n        if (blogOptions[0].key !== 0) {\n            blogOptions.unshift({\n                key: 0,\n                name: '-- Please select a blog --',\n            });\n        }\n\n        const {\n            className,\n            isSelected,\n            attributes: {\n                show_title,\n                show_image,\n                blog,\n                image_width,\n                image_height,\n                show_comments,\n                show_excerpt,\n                excerpt_length,\n                read_more,\n                shortcodes,\n                strip_html,\n                show_author,\n                show_date,\n                link_image,\n                post_type,\n                post_parent,\n                tax_name,\n                tax_term,\n                orderby,\n                order,\n                numberposts,\n                post_status,\n                ignore_protected,\n            },\n            setAttributes,\n        } = props;\n\n        function getFieldBlog() {\n            let selected = blogOptions[0];\n\n            if (typeof blog !== 'undefined' && blog !== null) {\n                console.log('Setting a pre-selected option as blog');\n                selected = blog;\n            } else if (typeof ten321__post_content_shortcodes__blocks__content.currentBlog !== 'undefined') {\n                console.log('Setting the \"current blog\" as blog');\n                console.log(ten321__post_content_shortcodes__blocks__content.currentBlog);\n                selected = ten321__post_content_shortcodes__blocks__content.currentBlog;\n            }\n\n            const [fontSize, setFontSize] = useState(selected);\n\n            return (\n                <CustomSelectControl\n                    label={__('List posts from which blog?', 'post-content-shortcodes')}\n                    options={blogOptions}\n                    onChange={(newValue, props) => {\n                        setAttributes({blog: newValue.selectedItem});\n                        return setFontSize(newValue);\n                    }}\n                    value={blogOptions.find((option) => option.key === fontSize.key)}\n                />\n            );\n        }\n\n        function getFieldPostType() {\n            let val = '';\n            if (typeof post_type !== 'undefined' && post_type !== null) {\n                val = post_type;\n            }\n\n            return (\n                <TextControl\n                    label={__('Post type:', 'post-content-shortcodes')}\n                    onChange={(newVal) => {\n                        setAttributes({post_type: newVal});\n                    }}\n                    value={val}\n                />\n            );\n        }\n\n        function getFieldPostParent() {\n            let val = 0;\n            if (typeof post_parent !== 'undefined' && post_parent !== null) {\n                val = post_parent;\n            }\n            val = isNaN(parseInt(val)) ? val : parseInt(val);\n\n            return (\n                <div>\n                    <TextControl\n                        label={__('Post parent ID:', 'post-content-shortcodes')}\n                        onChange={(newVal) => {\n                            const val = parseInt(newVal);\n                            setAttributes({post_parent: isNaN(val) ? newVal : val});\n                        }}\n                        value={val}\n                    />\n                    <p className=\"field-note\">\n                        <em>{__('Leave this blank (or set to 0) to retrieve and display all posts that match the other criteria specified.', 'post-content-shortcodes')}</em>\n                    </p>\n                </div>\n            );\n        }\n\n        function getFieldTaxonomySlug() {\n            let val = '';\n            if (typeof tax_name !== 'undefined' && tax_name !== null) {\n                val = tax_name;\n            }\n\n            return (\n                <div>\n                    <TextControl\n                        label={__('Taxonomy Slug:', 'post-content-shortcodes')}\n                        onChange={(newVal) => {\n                            setAttributes({tax_name: newVal});\n                        }}\n                        value={val}\n                    />\n                    <p className=\"field-note\">\n                        <em>{__('If you would like to limit posts to a specific set of terms within a taxonomy, please enter the taxonomy slug above (e.g. \"category\", \"tag\", etc.)', 'post-content-shortcodes')}</em>\n                    </p>\n                </div>\n            );\n        }\n\n        function getFieldTermSlug() {\n            let val = '';\n            if (typeof tax_term !== 'undefined' && tax_term !== null) {\n                val = tax_term;\n            }\n\n            return (\n                <div>\n                    <TextControl\n                        label={__('Term Slugs:', 'post-content-shortcodes')}\n                        onChange={(newVal) => {\n                            setAttributes({tax_term: newVal});\n                        }}\n                        value={val}\n                    />\n                    <p className=\"field-note\">\n                        <em>{__('If you would like to limit posts to a specifc set of terms within a taxonomy, please enter a space-separated list of either the term slugs or the term IDs', 'post-content-shortcodes')}</em>\n                    </p>\n                </div>\n            );\n        }\n\n        function getPostSelectionPanel() {\n            return (\n                <PanelBody title={__('Post Selection', 'post-content-shortcodes')}>\n                    {getFieldBlog()}\n                    {getFieldPostType()}\n                    {getFieldPostParent()}\n                    {getFieldTaxonomySlug()}\n                    {getFieldTermSlug()}\n                </PanelBody>\n            );\n        }\n\n        function getPostAttributesPanel() {\n            return (\n                <PanelBody title={__('Post Attributes', 'post-content-shortcodes')}>\n                    {getFieldOrderBy()}\n                    {getFieldOrder()}\n                    {getFieldNumberPosts()}\n                </PanelBody>\n            )\n        }\n\n        function getFieldOrderBy() {\n            let selected = orderByOptions[0];\n\n            if (typeof orderby !== 'undefined' && orderby !== null) {\n                console.log('Setting a pre-selected option as the post order');\n                selected = orderby;\n            }\n\n            const [fontSize, setFontSize] = useState(selected);\n\n            return (\n                <CustomSelectControl\n                    label={__('Sort posts by:', 'post-content-shortcodes')}\n                    options={orderByOptions}\n                    onChange={(newValue, props) => {\n                        setAttributes({orderby: newValue.selectedItem});\n                        return setFontSize(newValue);\n                    }}\n                    value={orderByOptions.find((option) => option.key === fontSize.key)}\n                />\n            );\n        }\n\n        function getFieldOrder() {\n            let selected = orderOptions[0];\n            if (typeof order !== 'undefined' && order !== null) {\n                selected = order;\n            }\n            return (\n                <RadioControl\n                    label={__('In which order?', 'post-content-shortcodes')}\n                    options={orderOptions}\n                    selected={selected}\n                    onChange={(option) => {\n                        setAttributes({order: option})\n                    }}/>\n            );\n        }\n\n        function getFieldNumberPosts() {\n            let val = -1;\n            if (typeof numberposts !== 'undefined' && numberposts !== null) {\n                val = numberposts;\n            }\n            val = isNaN(parseInt(val)) ? val : parseInt(val);\n\n            return (\n                <div>\n                    <TextControl\n                        label={__('How many posts should be shown?', 'post-content-shortcodes')}\n                        onChange={(newVal) => {\n                            const val = parseInt(newVal);\n                            setAttributes({numberposts: isNaN(val) ? newVal : val});\n                        }}\n                        value={val}\n                    />\n                    <p className=\"field-note\">\n                        <em>{__('Leave this set to -1 if you would like all posts to be retrieved and displayed.', 'post-content-shortcodes')}</em>\n                    </p>\n                </div>\n            );\n        }\n\n        function getPostInspectorPanel() {\n            return (\n                <InspectorControls>\n                    {getAdvancedPostPanel()}\n                    {getImagePanel(props)}\n                    {getDisplayPanel(props)}\n                </InspectorControls>\n            )\n        }\n\n        function getAdvancedPostPanel() {\n            return (\n                <PanelBody title={__('Advanced Post Selection', 'post-content-shortcodes')}>\n                    {getFieldStatus()}\n                    {getFieldProtected()}\n                </PanelBody>\n            );\n        }\n\n        function getFieldStatus() {\n            let selected = statusOptions[0];\n\n            if (typeof post_status !== 'undefined' && post_status !== null) {\n                console.log('Setting a pre-selected option as the post status');\n                selected = post_status;\n            }\n\n            const [fontSize, setFontSize] = useState(selected);\n\n            return (\n                <CustomSelectControl\n                    label={__('Post status:', 'post-content-shortcodes')}\n                    options={statusOptions}\n                    onChange={(newValue, props) => {\n                        setAttributes({post_status: newValue.selectedItem});\n                        return setFontSize(newValue);\n                    }}\n                    value={statusOptions.find((option) => option.key === fontSize.key)}\n                />\n            );\n        }\n\n        function getFieldProtected() {\n            let checked = false;\n            if (typeof ignore_protected !== 'undefined') {\n                checked = ignore_protected;\n            }\n\n            const [isChecked, setChecked] = useState(checked);\n\n            return (\n                <CheckboxControl\n                    label={__('Exclude password-protected posts from the list?', 'post-content-shortcodes')}\n                    checked={isChecked}\n                    onChange={(newValue, props) => {\n                        setChecked(newValue);\n                        setAttributes({ignore_protected: newValue});\n                    }}\n                    name=\"ignore_protected\"\n                />\n            );\n        }\n\n        function getListBlock() {\n            return (\n                <ServerSideRender\n                    block=\"ten321--post-content-shortcodes--blocks/list\"\n                    attributes={{\n                        show_title: !!show_title,\n                        show_image: !!show_image,\n                        blog: blog,\n                        image_width: isNaN(parseInt(image_width)) ? 0 : parseInt(image_width),\n                        image_height: isNaN(parseInt(image_height)) ? 0 : parseInt(image_height),\n                        show_comments: !!show_comments,\n                        show_excerpt: !!show_excerpt,\n                        excerpt_length: isNaN(parseInt(excerpt_length)) ? 0 : parseInt(excerpt_length),\n                        read_more: !!read_more,\n                        shortcodes: !!shortcodes,\n                        strip_html: !!strip_html,\n                        show_author: !!show_author,\n                        show_date: !!show_date,\n                        link_image: !!link_image,\n                        post_type: post_type,\n                        post_parent: isNaN(parseInt(post_parent)) ? 0 : parseInt(post_parent),\n                        tax_name: tax_name,\n                        tax_term: tax_term,\n                        orderby: orderby,\n                        order: order === 'desc' ? 'desc' : 'asc',\n                        numberposts: isNaN(parseInt(numberposts)) ? 0 : parseInt(numberposts),\n                        post_status: post_status,\n                        ignore_protected: !!ignore_protected,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className={className}>\n                {isSelected &&\n                <div>\n                    {getPostSelectionPanel()}\n                    {getPostAttributesPanel()}\n                    {getPostInspectorPanel()}\n                </div>\n                }{!isSelected &&\n            <div>\n                {getListBlock()}\n            </div>\n            }\n            </div>\n        );\n    }\n});*/\n\n//# sourceURL=webpack:///./src/ten321/post-content-shortcodes/blocks/list/block.js?")}});